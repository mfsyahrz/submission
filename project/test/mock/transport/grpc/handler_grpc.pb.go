// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/transport/grpc/handler_grpc.pb.go

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "github.com/mfsyahrz/submission/project/internal/transport/grpc"
	grpc0 "google.golang.org/grpc"
)

// MockMovieServiceClient is a mock of MovieServiceClient interface.
type MockMovieServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceClientMockRecorder
}

// MockMovieServiceClientMockRecorder is the mock recorder for MockMovieServiceClient.
type MockMovieServiceClientMockRecorder struct {
	mock *MockMovieServiceClient
}

// NewMockMovieServiceClient creates a new mock instance.
func NewMockMovieServiceClient(ctrl *gomock.Controller) *MockMovieServiceClient {
	mock := &MockMovieServiceClient{ctrl: ctrl}
	mock.recorder = &MockMovieServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieServiceClient) EXPECT() *MockMovieServiceClientMockRecorder {
	return m.recorder
}

// GetMovie mocks base method.
func (m *MockMovieServiceClient) GetMovie(ctx context.Context, in *grpc.GetRequest, opts ...grpc0.CallOption) (*grpc.MoviePagination, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMovie", varargs...)
	ret0, _ := ret[0].(*grpc.MoviePagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockMovieServiceClientMockRecorder) GetMovie(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockMovieServiceClient)(nil).GetMovie), varargs...)
}

// GetMovieDetail mocks base method.
func (m *MockMovieServiceClient) GetMovieDetail(ctx context.Context, in *grpc.IdRequest, opts ...grpc0.CallOption) (*grpc.MovieResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMovieDetail", varargs...)
	ret0, _ := ret[0].(*grpc.MovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieDetail indicates an expected call of GetMovieDetail.
func (mr *MockMovieServiceClientMockRecorder) GetMovieDetail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieDetail", reflect.TypeOf((*MockMovieServiceClient)(nil).GetMovieDetail), varargs...)
}

// MockMovieServiceServer is a mock of MovieServiceServer interface.
type MockMovieServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceServerMockRecorder
}

// MockMovieServiceServerMockRecorder is the mock recorder for MockMovieServiceServer.
type MockMovieServiceServerMockRecorder struct {
	mock *MockMovieServiceServer
}

// NewMockMovieServiceServer creates a new mock instance.
func NewMockMovieServiceServer(ctrl *gomock.Controller) *MockMovieServiceServer {
	mock := &MockMovieServiceServer{ctrl: ctrl}
	mock.recorder = &MockMovieServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieServiceServer) EXPECT() *MockMovieServiceServerMockRecorder {
	return m.recorder
}

// GetMovie mocks base method.
func (m *MockMovieServiceServer) GetMovie(arg0 context.Context, arg1 *grpc.GetRequest) (*grpc.MoviePagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", arg0, arg1)
	ret0, _ := ret[0].(*grpc.MoviePagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockMovieServiceServerMockRecorder) GetMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockMovieServiceServer)(nil).GetMovie), arg0, arg1)
}

// GetMovieDetail mocks base method.
func (m *MockMovieServiceServer) GetMovieDetail(arg0 context.Context, arg1 *grpc.IdRequest) (*grpc.MovieResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieDetail", arg0, arg1)
	ret0, _ := ret[0].(*grpc.MovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieDetail indicates an expected call of GetMovieDetail.
func (mr *MockMovieServiceServerMockRecorder) GetMovieDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieDetail", reflect.TypeOf((*MockMovieServiceServer)(nil).GetMovieDetail), arg0, arg1)
}

// mustEmbedUnimplementedMovieServiceServer mocks base method.
func (m *MockMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMovieServiceServer")
}

// mustEmbedUnimplementedMovieServiceServer indicates an expected call of mustEmbedUnimplementedMovieServiceServer.
func (mr *MockMovieServiceServerMockRecorder) mustEmbedUnimplementedMovieServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMovieServiceServer", reflect.TypeOf((*MockMovieServiceServer)(nil).mustEmbedUnimplementedMovieServiceServer))
}

// MockUnsafeMovieServiceServer is a mock of UnsafeMovieServiceServer interface.
type MockUnsafeMovieServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMovieServiceServerMockRecorder
}

// MockUnsafeMovieServiceServerMockRecorder is the mock recorder for MockUnsafeMovieServiceServer.
type MockUnsafeMovieServiceServerMockRecorder struct {
	mock *MockUnsafeMovieServiceServer
}

// NewMockUnsafeMovieServiceServer creates a new mock instance.
func NewMockUnsafeMovieServiceServer(ctrl *gomock.Controller) *MockUnsafeMovieServiceServer {
	mock := &MockUnsafeMovieServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMovieServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMovieServiceServer) EXPECT() *MockUnsafeMovieServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMovieServiceServer mocks base method.
func (m *MockUnsafeMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMovieServiceServer")
}

// mustEmbedUnimplementedMovieServiceServer indicates an expected call of mustEmbedUnimplementedMovieServiceServer.
func (mr *MockUnsafeMovieServiceServerMockRecorder) mustEmbedUnimplementedMovieServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMovieServiceServer", reflect.TypeOf((*MockUnsafeMovieServiceServer)(nil).mustEmbedUnimplementedMovieServiceServer))
}
